// Code generated by go-bindata.
// sources:
// apptpl/Makefile
// apptpl/cmd/main.go
// apptpl/cmd/server/server.go
// apptpl/docker-compose.yaml
// apptpl/go.mod
// apptpl/go.sum
// apptpl/model/mock/mock.go
// apptpl/model/mysql/mysql.go
// apptpl/model/storage.go
// apptpl/server/opts.go
// apptpl/server/server.go
// apptpl/version/version.go
// DO NOT EDIT!

package binddata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apptplMakefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xf2\xf7\x0f\xb1\x55\xd1\x28\xce\x48\xcd\xc9\x51\xc8\xcd\x4e\xc9\x2c\x52\xd0\x2d\x50\x48\xca\xcc\xd3\xe4\xe2\x4a\xcc\xc9\xb1\x02\x31\xf5\x13\x0b\x0a\xb8\xb8\xa0\x0c\xab\xe4\x9c\xd4\xc4\x3c\x2e\x4e\x87\xf4\x7c\x85\xa4\xd2\xcc\x9c\x14\x05\xdd\x7c\x98\x22\x85\xe4\xdc\x14\xfd\xdc\xc4\xcc\x3c\xbd\xf4\x7c\x2e\x2e\xb0\x42\x2b\x2e\x4e\x87\xa2\x5c\x05\xdd\xa2\x34\x98\x22\x40\x00\x00\x00\xff\xff\x48\x9d\xe0\xbf\x72\x00\x00\x00")

func apptplMakefileBytes() ([]byte, error) {
	return bindataRead(
		_apptplMakefile,
		"apptpl/Makefile",
	)
}

func apptplMakefile() (*asset, error) {
	bytes, err := apptplMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apptpl/Makefile", size: 114, mode: os.FileMode(420), modTime: time.Unix(1559036255, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _apptplCmdMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8f\xc1\x6a\xf3\x30\x10\x84\xcf\xda\xa7\xd8\x5f\x87\x1f\x1b\x82\x4c\xe9\x2d\x25\x87\x60\x9a\x63\x2f\xa1\x0f\xa0\x48\x6b\x55\x44\xb2\xcc\x4a\x0e\x05\xe3\x77\x2f\x72\xdc\xea\x22\xd8\xd9\x99\x6f\x76\xd2\xe6\xae\x1d\x61\xd4\x7e\x04\xf0\x71\x4a\x5c\xb0\x01\x21\x97\x05\xd5\x74\x77\x1f\x3a\xd2\xba\x76\x26\xda\x2e\x13\x3f\x88\x25\x08\xe9\x7c\xf9\x9a\x6f\xca\xa4\xd8\xe5\x69\x78\x79\xed\x4c\xba\xb1\xae\x4a\x48\x4e\x42\x0b\xf0\xd0\x5c\x53\x38\xa5\xd2\x47\x8b\x27\xfc\xbf\xad\xa8\x3e\xc5\xa8\x47\xbb\x80\x10\x9f\x99\x8e\xb8\x3f\x69\x82\x97\x07\x10\xe2\x1c\xbc\xce\x94\x37\x61\xf4\xa1\x8e\xae\xb3\x73\x94\xcb\x25\xf1\x71\x1f\xad\x95\x30\xcc\xa3\x41\x3f\xfa\xd2\xb4\xb8\xfc\x91\xd4\xd9\xda\x9d\xd1\x80\x10\xcf\xca\xea\xba\x7d\x7d\xb4\x07\x10\x2d\xac\xbb\xb9\x9e\xfc\x34\xfb\x01\x89\x19\x8f\x27\xfc\x8d\x79\xff\x26\x33\x17\x6a\xda\xb7\x4d\xf9\x77\xaa\xe8\xba\x2a\x42\x72\xea\xa2\x8b\x0e\x0d\x31\xb7\xb5\xcc\x0a\x3f\x01\x00\x00\xff\xff\xd1\x45\xf1\xe1\x45\x01\x00\x00")

func apptplCmdMainGoBytes() ([]byte, error) {
	return bindataRead(
		_apptplCmdMainGo,
		"apptpl/cmd/main.go",
	)
}

func apptplCmdMainGo() (*asset, error) {
	bytes, err := apptplCmdMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apptpl/cmd/main.go", size: 325, mode: os.FileMode(420), modTime: time.Unix(1559036521, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _apptplCmdServerServerGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x5d\x6b\xdb\x30\x14\x7d\x96\x7e\xc5\x9d\x1e\x8a\x3c\x84\x93\x31\xd8\x43\x20\x0f\x5b\xd7\xbd\x35\x83\x86\x6d\x0f\xa5\xd0\x6b\xfb\xc6\x15\xb1\x3e\x26\xc9\x29\x25\xe4\xbf\x0f\xc9\x26\xcd\xa0\xd4\x60\x6c\xdf\x7b\xce\xe1\xf8\x1c\x79\x6c\xf7\xd8\x13\x44\x0a\x07\x0a\x9c\x6b\xe3\x5d\x48\x20\x39\x8b\x07\x02\x71\x3c\x42\xed\xf7\xfd\x06\x0d\x9d\x4e\x8b\x09\x24\x38\x13\xbd\x4e\x4f\x63\x53\xb7\xce\x2c\xa2\xdf\x7d\xfa\xbc\x68\x5d\x13\x50\xf0\x8a\xf3\x03\x06\xd8\x16\xe0\xb5\xe9\x60\x0d\x57\x65\x55\x5f\x3b\x63\xd0\x76\x47\xce\x7e\x45\x5a\x01\x88\x59\x4c\x71\x76\x37\xda\x9b\x15\x84\xd1\x2a\x7e\x9a\xf8\x92\x33\xf3\x12\xff\x0e\x5f\xbb\x2e\x00\xc4\x14\xb4\xed\x39\x23\x8b\xcd\x40\xb7\xae\xdd\x43\xe3\xdc\xc0\x19\x96\x75\xb9\x66\x4c\xc5\xf9\x6e\xb4\x2d\x68\xab\x93\xac\xe0\xc8\xd9\xd9\x4a\xfd\x63\xc0\x3e\xca\xaa\xde\x16\xe8\x6f\x0c\xf2\x2a\x0b\x28\x10\xf9\x21\x14\x88\xd5\x97\xe5\x72\x99\x5f\x9e\xa9\x99\x13\xc9\xb6\xac\xb6\x3d\x64\x0c\xc5\x28\xaa\xb7\x24\xbf\x39\x37\x14\xc1\x57\x8b\x0a\x84\x71\xed\x5e\x28\xd8\xe1\x10\x49\x81\x98\x76\x90\xa7\xd0\x61\xc2\x06\x23\x01\xd9\x5e\x5b\x7a\x5b\xf5\xc2\xe8\x39\x0d\x05\xa2\x8b\x36\x7b\xcc\x77\x19\x5f\x58\x3b\xcd\xbf\x1f\x46\x2b\x5b\xd3\xc1\xc7\xff\xb2\x57\x80\xa1\x8f\x70\xff\x30\x85\x55\x01\x85\xe0\x42\x0e\x29\x67\xee\x7c\x8a\xb0\x06\x83\x7b\x92\xf7\x0f\xf1\x40\xf5\x4f\x9f\xb4\xb3\x0a\x96\x15\xe7\x4c\xef\xe0\xb5\x92\x0f\x6b\x10\x22\x13\xd9\xcc\x42\xef\xc9\x76\x32\x7f\x29\xc8\xdc\x3f\x3a\x3d\xdd\x66\xfc\xf7\xed\x46\x9e\x89\x55\xc5\xd9\x69\x12\xbb\x28\xf3\x3d\x9d\x9b\x33\x6c\x9b\x5c\xc0\x9e\xe4\x85\x46\xe9\x7f\x7d\xf6\xe2\xd1\xea\x56\x3e\x96\x69\x8b\x16\xac\x4b\xd0\x10\x90\xf1\xe9\xe5\x71\x66\xbd\xe7\x37\x3b\x94\x38\xd9\xe4\x6c\xee\x7f\xb5\x2e\xfb\x0d\x3d\x4f\x05\x15\x4e\x5d\xd7\x19\x12\x28\x8d\xc1\xce\x27\xa5\xbe\x1b\xad\xcc\x15\xfc\x0b\x00\x00\xff\xff\xd3\x0a\xf0\xf1\x53\x03\x00\x00")

func apptplCmdServerServerGoBytes() ([]byte, error) {
	return bindataRead(
		_apptplCmdServerServerGo,
		"apptpl/cmd/server/server.go",
	)
}

func apptplCmdServerServerGo() (*asset, error) {
	bytes, err := apptplCmdServerServerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apptpl/cmd/server/server.go", size: 851, mode: os.FileMode(420), modTime: time.Unix(1559036521, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _apptplDockerComposeYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8d\x31\xcb\xc2\x30\x10\x86\xf7\xfe\x8a\xdb\x3a\x7d\x4d\xa1\x7c\x1d\x6e\x8b\xd4\x4d\xa9\x36\x05\x71\x2a\x51\x83\x04\x9a\xa4\x5e\x62\xc0\x7f\x2f\x49\x1d\xf4\x86\xe3\xe5\x7d\x5e\x78\xa2\x22\xaf\x9d\x45\x28\x9b\xb2\xf0\x8a\xa2\xbe\x2a\x8f\x05\x80\x79\xf9\xc7\x9c\x02\x80\x36\xf2\xae\xf0\xd3\xfc\x57\x6d\x2e\x95\x8d\x9a\x9c\x35\xca\x86\x75\x05\xb0\x3f\x8b\xe3\x6e\x1a\xfa\x7e\x9c\x0e\x5c\x88\x53\x3f\x74\x08\xe4\x5c\xf8\xe1\x1d\x1f\xf9\x86\x8b\x2d\x82\x5c\x96\x4c\xa2\x9b\x9f\x66\xb5\xa6\xfb\x83\x8a\xdd\x64\x90\xc8\xa2\x24\x36\xeb\x0b\xcb\xe6\x4c\x17\x47\xe1\x6b\xd8\x34\x75\x5b\x63\xfa\xef\x00\x00\x00\xff\xff\x64\x10\xda\x5a\xc8\x00\x00\x00")

func apptplDockerComposeYamlBytes() ([]byte, error) {
	return bindataRead(
		_apptplDockerComposeYaml,
		"apptpl/docker-compose.yaml",
	)
}

func apptplDockerComposeYaml() (*asset, error) {
	bytes, err := apptplDockerComposeYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apptpl/docker-compose.yaml", size: 200, mode: os.FileMode(420), modTime: time.Unix(1559034237, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _apptplGoMod = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\x41\xca\xc2\x30\x10\x46\xd7\xff\x9c\x62\x96\xbf\x8b\x4e\x9a\x5a\xf0\x16\xde\xa1\xad\x71\x0c\x36\x99\x38\x31\x45\x28\xbd\xbb\x04\x57\xd9\x7c\x7c\xf0\x1e\x2f\xc8\xad\xac\x0e\xf7\x1d\x29\x3d\xf9\x3a\x05\x77\x1c\x00\x2c\x68\xc9\x0e\x00\xea\x5e\xc5\xab\xc3\x7f\xf8\x63\xff\x7e\x94\x99\x16\x09\x86\x7d\xec\x58\xa2\x5f\xea\xc3\xcd\xd2\x48\x7d\x2b\x48\xf7\x11\x0d\xa6\x0e\x6e\x3d\x5d\xc8\x36\x3c\x7b\x2d\x29\xbb\x68\x56\x61\x2d\xf9\x97\x18\x5a\x25\xdd\xed\xd9\x2c\x32\xeb\x54\x0b\x3d\x8d\x70\x82\x6f\x00\x00\x00\xff\xff\xc6\xca\xe0\x62\xae\x00\x00\x00")

func apptplGoModBytes() ([]byte, error) {
	return bindataRead(
		_apptplGoMod,
		"apptpl/go.mod",
	)
}

func apptplGoMod() (*asset, error) {
	bytes, err := apptplGoModBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apptpl/go.mod", size: 174, mode: os.FileMode(384), modTime: time.Unix(1559036521, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _apptplGoSum = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x98\x49\xb7\xa2\x58\xb6\xc7\xe7\xf5\x29\x72\xee\xf2\x02\x87\xfe\xad\x55\x03\xa4\x11\x14\x10\x54\x40\x9c\xd1\x1c\x1a\xe9\x39\x20\xc2\xa7\x7f\xcb\xb8\x59\xf9\xf4\x46\x44\x45\xd6\xcb\xac\x89\xcb\xd1\xef\xbf\xd9\xfd\xd9\x69\x3e\x64\x63\xf8\x11\x35\x15\xb6\x19\xfb\x7a\x38\x8d\x28\xcb\xb1\xa1\xa9\xca\xdf\xee\xf8\x07\xf9\x41\x60\x69\xf3\x51\x35\xf1\x6f\x19\xf1\x3f\x0f\xd5\x13\xcd\xed\x6d\x43\x37\x5d\x2e\xf5\xdc\x92\xd4\x0d\x69\xa8\x23\x04\xea\x40\x23\x6d\x53\xa0\x16\x27\xbb\x68\x4e\x3c\xc3\xf9\xe7\x3f\x5e\xc0\x41\x5f\x35\x35\x16\x35\x35\x1a\xcb\x75\xd0\xe6\x4f\x32\xfe\x81\xaf\x01\x4e\x70\x38\xc0\x01\xc0\x09\x86\xa6\xd7\x30\x04\x11\x13\xd2\x21\x24\x42\xe6\x45\x35\xed\x05\x33\x53\xe8\xb8\x99\x3d\x44\x3a\x02\xea\xc9\x3d\xa5\x31\xdd\x20\x54\xa5\x1d\x5d\x25\x88\x14\x53\x56\xad\xab\xb0\xdc\xb8\x37\xd5\xa8\x89\x8a\xbe\x09\xa2\x2c\x0e\xb1\xa0\x8d\x7f\xbb\x13\x1f\xc4\x07\xfe\x02\xe6\x4e\x25\xa7\x3f\xda\x7d\x0e\x78\xa5\xf3\x2e\x47\x82\xf1\x64\xe5\x7a\x34\x4f\x0b\x79\x6a\xac\xc5\x59\xa0\x01\x7d\x6a\x25\x4d\x1b\xfb\x0b\xb8\x87\x0d\xc2\xe0\x10\xc5\xbf\xdd\xc9\xa7\x8f\xf0\x55\x5e\x47\x4d\xd5\x06\x43\x1e\x96\xf0\x45\x62\x54\xd8\x31\x8f\xf5\x5c\x90\xc8\xb3\xa7\x56\x1e\x49\x5c\x95\x18\xdb\x79\x4d\x44\x02\xeb\x36\xc5\x99\x35\x64\x17\x9e\x25\xe8\xa3\xfc\x23\x89\xb4\x59\x7f\xaa\x80\xa7\xbf\x7e\x26\xb2\x83\x0b\xb3\xb7\x1d\xb0\xc1\x90\x87\xc2\x38\x80\x09\x29\x4b\x9c\xb9\x18\x45\xb9\x58\x5b\x2a\xa6\xf7\xda\x21\xd3\x66\x12\x3f\x17\x3f\x11\x41\xb0\xba\xc3\xfe\x19\x16\xf0\xe6\xa1\xba\x86\xa5\xbf\xb0\x47\x31\x5b\xd1\x41\xb6\x1b\x2c\xeb\x71\x2d\x9d\x15\x41\x93\xd0\xa2\x24\xaa\x27\x65\x18\x97\x07\x09\x1c\xcd\x2f\xe4\x76\x4c\xc7\x99\x23\x9f\xec\x2a\x06\x55\x50\x3f\xbd\x8f\x7f\x10\xaf\xf0\x53\x25\x31\xb5\xc7\xd4\xe7\x39\xe9\x6e\x8c\xb0\x39\xdf\x9c\x9c\x74\xc9\x9d\x6b\xd4\xe5\xae\x9a\xa2\x9d\x46\x07\x51\xe7\x6b\x4c\xfc\xee\x9b\x38\xb8\xc3\x28\xcd\xbe\xd9\xdd\xc2\xe9\xfb\xb8\xee\x58\x9f\xf3\x23\x0f\x98\x79\x86\xd2\xca\x6d\xb0\xea\x4e\x96\xc2\x54\x62\xa8\x38\x98\x54\xae\xab\xb7\x13\xd2\x56\x11\xad\x92\xdc\xaf\xc1\xc4\xdf\x01\x86\x75\x8e\x60\x5d\x34\xd5\x37\x87\x20\xd4\x95\x71\xf8\x5a\x04\x04\x4e\x50\x04\x45\xf1\x34\x58\x53\x10\x8f\xd9\x38\xe2\x38\x8e\x4b\x5e\x4b\xcf\xc4\x76\xa3\xbe\xd1\x16\x2a\xbc\x15\x0f\xb3\xda\xcc\xe7\xdc\x25\xb4\x30\x4b\x6a\x3f\x64\x9a\x86\xe7\xdb\x6c\x53\x53\x72\x97\x45\x6f\xd2\x09\xaa\x9b\x21\x4f\xe6\x3f\xfe\x3c\xbf\x8a\xfa\x60\x5f\xd0\xb7\x29\x43\x0b\x15\xf2\xe4\x84\x59\xd6\xb1\xc7\x3a\x93\xf0\xe7\x2a\x19\xb9\x81\x63\xf5\x5a\x11\x8d\xc6\xbe\x0f\xcd\xad\xbd\x29\xcd\x1b\x3a\xcd\xeb\x75\xd4\xd4\x43\x9f\x87\x18\x42\xf0\xe5\x7b\x78\x9c\xc4\x09\x9c\x01\x34\xe0\xd7\x34\x4d\xd1\x30\x08\x99\x38\x88\xc9\xa7\xda\xc0\x29\x6e\x31\x91\xa4\xbe\x9a\xf2\x32\x01\x76\xee\x15\x13\xee\xb8\x2c\xdb\x1d\xdb\x48\xc5\x76\xaa\xb5\xdf\xb6\xfb\x00\xc8\x5c\xfa\x17\xd5\x5e\x3e\xd1\xdd\xe1\x9e\x00\xcc\x8d\x09\x80\x5b\x5e\x41\xbc\xbf\xda\x96\x60\xd5\xb3\x37\xd1\x97\x73\xb9\x27\xf6\x73\xb5\xe8\x7b\xd4\xd3\x3c\xfa\x4e\x34\x6d\xea\x3c\x7a\xfe\xfb\xf4\x1c\xfe\xe4\x91\x83\xd1\x88\x62\x62\xb0\x6d\xdb\xa1\x23\xde\x0e\x0b\x36\xe5\x44\x5e\xb5\x66\x7b\x66\x31\x7e\xb2\x07\xe3\xca\x95\x3d\x51\x89\xf6\x2f\x79\x2f\x66\x1e\x3c\x20\x5f\x6b\x52\x3a\x70\x7a\xcd\x37\xda\xfe\x70\x37\x56\x2b\x7d\x73\x58\xd1\x8e\xa5\xee\x76\x92\xca\x02\xac\xc3\xc8\xfe\x1a\x1b\xef\xd8\x66\x8d\xba\x72\x1d\xf7\xf9\x1d\xf6\x58\x35\xa3\xae\xfc\x1e\xbe\x08\x22\x76\x94\xae\x80\x4a\x25\x52\x75\x73\x7b\xc9\x33\xca\x98\xf7\x51\x94\x2d\xd5\x0a\x1d\xb6\xf4\xb5\xdc\xc7\x65\x26\xa6\xf4\xf4\x15\xfe\x68\xfa\x0a\x0b\xc7\xbc\x8c\x3f\x9b\x04\xf9\x01\x9e\xc4\xf6\x84\xae\xf6\xf1\xb8\xec\xcc\xa0\xdd\xcb\x82\x9c\xe5\xe9\x44\x3e\xf4\x2a\xd7\x2d\x28\xf8\x77\x7a\xab\x94\xad\x7f\xe5\x56\x01\xad\xfd\x09\xe2\x8b\xa9\x77\xae\x92\x49\x43\xd9\xa4\x83\xbe\x3a\x6e\x15\x33\x71\x6a\xc1\x70\xba\x2e\x29\x30\x9f\xf2\xe8\xfd\x38\x89\x8a\xad\xc9\xad\xad\x17\x3f\x04\x3f\x1b\xdb\x93\xca\x7c\x46\x6b\x68\x99\xec\xb2\x2a\x46\xea\x20\xf1\x45\xa6\x5c\x4f\x9c\xbb\xdd\x48\x47\x9f\x2c\x12\x57\x1c\x60\x69\x25\x55\x91\x8a\xb3\xfa\xd0\xf1\x5f\xe1\x5e\x8c\x8c\x39\x65\xc7\x6f\x7a\xee\xb0\x9d\xed\x92\x00\x86\x18\x95\x95\xbf\x19\x37\x5d\xf7\x40\x33\x84\x71\x7b\x89\x72\x97\x36\xe6\x3c\xe3\x7e\x48\x45\x5d\x99\xe4\x71\x5c\xc2\xb7\x69\xc8\x01\x02\xe7\x68\x12\xb0\x6b\x06\x44\x90\x25\xa8\x84\xa7\x89\xe0\x45\x96\x66\x1e\xe3\xd8\xd5\xea\xdc\xcf\x01\xec\xe7\xc8\x23\x37\x09\x42\xc7\xf8\x61\xa3\x41\x10\x73\x5c\x6e\x27\x6c\x16\x69\x19\x3c\xbe\xcb\x91\x6f\xb2\xcf\x9f\xa7\x22\xfb\x41\x3c\x71\xfb\x1b\x5b\x25\x63\x17\x0d\x56\x7c\x61\xf0\x65\x7c\x58\x8c\xdc\xc8\xe3\x80\x27\xa4\xcc\xec\x19\x46\x65\xb2\xa8\x79\xe4\xaa\x63\x44\xbf\xc2\xbd\x18\x29\xab\x27\x22\x1b\x0c\x5b\x69\x87\xc5\x08\x34\x75\x3f\x2f\x5d\xab\x6e\x27\x46\xe4\x8f\xc3\x98\xb2\x74\x8d\x3a\x46\x12\xf8\xb1\xfe\x9a\x19\x65\x50\xa7\x58\xdb\x37\x43\x13\x8e\xc9\x33\x89\xc9\x4f\x3b\x7d\x85\x5b\x25\xe5\xe6\x72\xa2\xe1\x81\x03\xcc\x99\xaa\x97\xce\xea\x1f\x49\x66\x9f\xb3\xec\x52\xe2\xfe\x92\x8c\x8e\x35\x52\xa7\x4d\xfa\x27\x88\x2f\xa6\x32\xa5\x5d\xb1\x7c\xb8\x2a\x2f\xb9\x91\xdc\x53\x2c\xba\x56\xf8\x69\xdb\x24\x37\x4d\xec\xdc\x8d\x33\xf4\x16\x3d\xef\x8c\x4a\x13\x89\xf7\x9d\x26\x0b\x50\x96\x47\x4d\xdf\x62\x59\x54\x7e\x4e\xb7\xd7\xec\x90\xe9\x39\xd1\x8b\x15\x8b\xa6\xbc\x6a\x43\xa0\x63\x42\x19\x62\xd6\xae\xba\xe4\xa5\x8d\xf5\xd9\x14\x38\x3e\xa2\xce\x00\xf7\xe4\xf7\x0e\xf1\x1c\xf1\x35\xca\x7a\x78\x87\xc1\x73\xca\x57\xcd\x88\xe0\xd0\x07\xed\xef\x12\x4f\xf6\x95\x1b\x46\x1a\xf5\x81\x7e\x11\x2f\x5a\x24\x1c\x1f\x9b\x16\xe3\xa2\xf0\x5e\x4e\x6e\xc0\x5e\x09\x53\x4d\xf9\x8b\xbc\xcf\x86\xd3\xdd\xf8\x8f\xd8\x2f\xe6\x5b\x8f\xae\xd5\xe0\x3d\x4f\x67\x19\x6c\xd9\x91\x34\x2f\x3b\xed\x0c\x04\x73\x1e\x46\x4b\x21\x0e\x41\x7f\xa0\x24\x41\xaa\x58\xb2\x7e\x4f\xee\x5b\x10\x15\x11\x96\x04\xc5\x6b\x56\xd3\x38\x0f\x18\x82\x05\x04\xc1\xac\x39\x02\x04\x14\x47\x45\x11\x4b\xbe\x36\x68\xaf\x37\x14\xd3\x8e\x73\x65\xc7\xe1\xc8\x46\x0f\xa9\x31\x9a\xc2\xdb\x13\x1e\x7d\xb6\x87\xc7\x46\x31\xdb\xc5\x3b\x4b\x1c\x95\x87\xf6\x0f\xf4\xda\xf4\xf1\x5c\xc4\xc0\xcf\x57\x24\xfc\xba\xed\xbb\x6d\x57\x1c\xcb\x32\xf7\x6a\x6f\x43\x2d\xfb\xda\x1b\x6e\xe1\xc9\x0b\xb7\x85\x2b\x2b\x15\x75\x86\x73\x28\x5c\xba\xd5\x7b\x42\xde\x50\x53\xaf\xf3\x01\xf6\xc1\xd0\xf4\x58\xda\x7c\xee\x04\xcc\x13\x69\xf4\xce\x5d\x37\xf4\xb3\xf1\x08\x3b\x65\xc7\x17\x4b\x79\x0f\x06\xac\xf7\xaf\xdd\xb5\xf6\xc8\x91\x9a\x0a\x7d\xf1\xce\x81\x32\xed\xd1\x9f\x41\xbe\x18\xbb\x3a\xc5\x50\xd9\xdc\x87\x59\x2e\x2e\x88\x3d\xca\xb2\x85\x23\xe8\x38\x7a\xe7\x0d\xe1\x2e\x68\xf5\x83\xe8\x4a\x41\x60\xc9\x6a\xf5\x9e\x92\x45\x53\xa3\xa6\x1f\x60\xfd\xac\xce\x29\xaf\xe3\x66\x42\xeb\x01\xf6\x55\x5e\x07\xe5\x1a\xc1\x6e\x84\x75\x04\xd1\xef\xab\xd8\x53\xa9\x9a\xa0\x70\x24\x04\xe6\xb1\x23\x9b\x13\x68\x8f\xc1\x36\x57\x53\x9b\x3a\x1c\xb8\x61\x39\x07\x7a\x30\x55\xdc\xbd\x3e\x48\xe3\x24\x15\x7f\x41\xe9\xe5\xd3\xce\xf8\x8a\xa8\xd3\xd3\x46\xd1\x1f\xf7\xce\x21\xdb\xeb\xaa\xc2\x40\xd1\x0e\xc9\x06\x2d\xba\xe1\x14\x22\x75\xdd\x63\x72\x7a\xc2\xa2\xf7\x38\x17\x3d\xd6\xf6\x70\x18\xe6\x67\x5a\xbd\x6f\x7b\xb1\x30\x93\x65\xcc\x96\x7c\x82\xe7\xa1\x64\x1e\xec\x83\xaa\x1a\xbe\xaf\x3d\x77\xa3\x50\x3d\x55\xa4\x48\x5d\x51\xb3\x3b\x1c\xcd\xe6\x3b\xe4\x30\x7f\xbf\xe4\xb5\x8a\xed\xd7\x0c\xe3\xa9\xfd\xa1\xb5\x7c\xb3\xbc\x4d\x07\xa3\x6b\x08\xfc\x5c\xf8\x19\x91\xcc\x64\xe4\xe7\x0d\x28\xc9\x50\x44\xdf\x99\x38\xc0\xc7\xf0\xbd\x81\xd4\x2e\xbc\xaf\xa4\x9d\x47\x3a\x67\x4c\xcf\x0f\xd3\x0e\xfa\x36\x24\x60\xd2\x0d\xce\x03\xcb\xdd\x2c\xa8\x30\xea\x9e\xc4\x42\x6f\xbe\xe7\x5e\x99\x87\x58\xdb\x7d\x5f\x9b\xb4\xe7\x5c\xed\xc0\x0b\xa7\x3b\xe1\xac\xca\xf3\x11\xca\xb4\xdf\x8f\xc2\x29\xe7\x85\x92\xe2\x2f\xa1\xad\xdd\xcd\x1c\x23\x29\xaf\x79\xff\xe0\x2a\x48\xf3\xa8\xa9\x83\xfc\xe9\xcb\xa6\x85\xfd\x90\x7f\x86\x88\x7b\x2f\xfd\xb6\x4d\x2e\xc9\x78\x81\x79\x18\x61\x8c\x9f\xdf\x6e\x26\xb7\x68\x61\x73\x1b\xb8\x68\xb1\xc2\x49\x22\x2f\x5d\xdc\x4f\x4b\xf5\xb0\xbf\xe0\x87\xe1\x5b\x3e\xe4\x28\xf8\x3d\x50\xf8\x07\xfb\x24\x3a\xf7\xf9\xcc\x8f\xe6\x8a\xec\xd9\x59\x97\xfd\x53\xb9\x43\xa1\xbd\x8d\x51\xb0\xc1\x02\x5c\x2a\x53\xcf\x22\xdb\xae\x64\xf2\xe9\x10\xfd\x09\xe2\x8b\xa9\x5a\x47\xd1\x11\x76\x11\x28\xf2\x9e\x31\x3c\x76\x23\xf3\x6e\x18\x16\xeb\x52\xe3\x61\x76\x99\xb7\x37\x03\x57\xe3\x47\x84\xfa\x88\x46\x3f\x06\xa3\xae\xcc\x07\x48\x3e\x9d\xc0\xbf\x39\x41\xb1\x66\x66\xdf\x2d\x92\x84\x53\x30\xd7\xd0\x99\x26\xc5\xf1\x19\x41\x8e\x5b\x8a\x47\xa3\xf9\xe8\xd0\x15\x61\x5b\x47\xc8\xfc\x62\x72\x3e\x44\x19\x2c\xcb\x6f\x8f\x88\xac\xa9\x60\x9c\xf7\xdf\x3f\x50\x4e\xc9\x1c\x88\x4e\xeb\x8b\x35\xe1\x96\x09\xa5\x39\x7e\x2e\xf1\x89\x75\xa1\x04\x7a\xda\xf5\x85\xbe\x68\x0b\x61\x12\x1d\xde\xf6\xf8\x4f\xe8\x55\xd0\xa2\xa1\x1f\xa3\x61\x7c\xae\x26\x4f\xfe\xeb\xfe\xa4\xb8\xae\x4a\x26\xe9\x34\x2e\xa2\x4a\x9f\x38\x67\xb7\xcd\x3d\x19\x81\x0c\xa7\x0a\x27\xe3\x13\x2f\x91\x03\x25\x46\x14\x11\x11\xfe\x3b\xbf\x89\x61\xff\xdc\x50\x9f\x6f\xf5\x68\xec\x7b\x58\x0f\x6f\xdb\x09\x89\x33\x38\x01\x18\x8a\x5a\x87\x41\x14\xf3\x11\x0b\x13\x22\xfe\x2c\xec\xa3\x1e\x5c\xf9\x48\xc2\x26\xce\x72\x33\x9e\xac\x91\x75\x09\x08\xb7\xb7\x99\x5b\x39\xe9\x74\x63\x72\x25\x41\xd9\x65\x64\x26\xe9\xdf\x21\xf9\x3a\xc0\xe3\x9d\x88\x57\x82\x45\xe5\x85\xaf\x85\xf7\x39\x62\x93\xfc\x76\xf3\x76\x71\x6c\xcf\x7a\xcd\x69\x29\xb9\xdb\xd0\x62\xd7\x6c\x78\xfb\x27\xca\x3d\x4c\x4a\x18\x0d\xe0\xa5\x31\xf2\x09\x45\x00\xb4\x62\x8e\x95\x7f\xd1\xbd\xeb\x49\x5e\x5c\x37\xb5\xb6\x7b\x56\x04\x56\x9b\xa9\x37\xfa\xb8\xeb\xef\xc9\x83\x17\x3c\xed\xcf\x41\x5f\x0c\x0e\x1f\xa0\x34\xeb\x62\x72\xc5\xb1\xdb\x68\x0f\xe5\x96\x94\xde\xce\x0b\xea\x8b\x16\x92\xc7\xb2\xac\x42\x71\x2e\x67\xa3\xbf\xa7\xf7\xf7\xe8\xb7\xb0\x2c\xe1\x90\xc3\xe7\xd0\x58\x7f\x1e\x68\x88\x2f\xef\x75\x7a\xe1\xf7\xb2\x84\x57\x01\x71\xe2\x5a\x9f\xb1\x08\x14\x8f\x03\xcd\xc5\x49\xdb\xf7\xdb\x4d\x18\x63\x3c\x95\xa5\x6c\x5e\x06\xf9\x7b\xda\xb6\x45\x8a\xc1\xbe\x6f\x7a\xf4\xf4\xfd\x7b\x3f\x08\xa7\x60\x7a\x24\xea\x46\x31\xdd\x95\x0e\x32\xa7\x25\x7a\x55\x90\xc6\xc4\x25\x35\x63\xa8\xa5\x63\x9c\x10\x3d\x6d\x6a\xa6\x5c\x7e\x31\xb7\x82\x4b\xd0\x3f\x23\xb5\x8e\xf3\x24\x29\xf3\xf0\xfb\x56\x96\xef\x55\x96\x2d\x1a\x25\xf3\x1f\xe7\x3d\xd1\x46\xc7\xba\xd8\x17\x5d\x72\x6e\x52\x14\xa6\x6c\x7a\x35\x5d\x9f\x42\x47\xc9\xbf\x62\xd4\x1b\xbb\x1f\x11\xea\x1b\x84\xb0\xb0\x0c\xa2\x22\xe9\xf3\x38\xf8\xd6\xc9\xe9\xb7\x32\xd8\x1d\x30\x29\xf7\x1f\xc7\x64\xa5\xde\xd4\x01\x67\x0e\x73\x33\x1d\x79\xeb\x2c\x00\x86\x2c\xa2\x23\xd6\x27\xde\xc3\x57\x37\x2e\x4d\xbe\xe7\x24\x7a\x4e\xe6\xfc\x09\x1a\xc7\x3c\xfe\xde\xcb\xb1\x80\x67\x76\xef\x6f\x70\xb7\xd5\x77\x4d\xd3\xa7\xa5\x71\x15\x36\x4a\x7c\x29\xbd\x5e\xad\x09\x53\x3e\x2c\x71\x66\xef\xe3\x02\xbd\x7b\x04\x65\x4d\x8b\xda\x3e\xaf\x53\x2c\x86\x51\x5e\x05\xe5\x5b\xa6\xb3\x38\x0f\x70\x92\x20\xd8\x75\x14\x33\x3c\x1e\xe3\x11\x0f\x01\xf5\xa2\x6b\xac\x78\x73\x91\xfb\x3b\xa2\x71\x4a\xac\xa9\x88\x96\x1e\xc2\x79\xd2\x3a\x2b\x1c\xd0\x74\x94\x1b\x45\xec\x21\x43\x59\x6d\xb4\x7d\xf7\x16\xca\xfb\xb1\x45\xb0\xc6\xca\x26\xed\x47\xf4\xf9\x34\xfc\xf6\x82\x3b\x59\xda\x31\x0f\xd5\x3b\x65\x04\x83\x41\x5e\x2e\xe6\x01\x6c\x76\x50\xd1\xaf\xd3\x15\xe8\xf7\x6b\x9a\xd8\xf4\xca\x31\x35\x90\x57\x7f\x86\xf8\x62\xea\xa0\x1b\x63\xa9\xc5\xc3\xe0\xf0\x46\x64\x3a\xa8\x6d\xf1\x47\x7a\x71\xed\x20\xe3\x80\x32\xc3\x0b\x63\x4c\xb1\x36\xfa\x32\xe8\xdf\x6f\x3b\xa8\x4d\x08\x12\x0b\x12\xd8\x37\xdf\xb7\xb5\x1b\xd5\xce\x43\x6e\xba\x0d\x04\x0d\x13\x56\x12\xda\xb7\xba\x20\x9a\x96\xb4\xd1\x1a\x59\x28\xf2\x6c\x66\xcb\x66\x47\x6c\xf0\x2f\xaf\xee\x4f\x68\x14\xa0\xe1\x73\xfd\x7f\x8d\xa5\xfd\xa0\xa3\x47\x86\xdf\x57\x94\xe3\xf9\xf9\x26\xaf\xbc\xd3\x0a\xce\xde\xd2\xc9\x5d\x53\x68\xb2\x38\xd2\x70\x48\x33\xbd\x70\x76\x3f\x32\x34\x6a\xc2\x3e\xf8\x0c\x22\xf5\xcd\x9f\xf8\xa0\x5f\x49\xf7\xb0\x2f\xc1\x19\xe2\x59\xdb\x71\xab\x02\xe2\xf0\xb4\xb3\x12\xb1\x36\xcf\x56\x2e\x95\x28\x99\x72\x02\x33\x7f\x45\x7b\x31\x91\xdc\x93\xd3\xfe\x3a\x57\x06\xeb\xde\x55\x43\x3a\xf1\x2b\xa1\x28\x32\x6a\xcf\xe0\xce\x64\x00\x06\x56\x86\x7c\x9a\xb8\x41\x17\x55\xe7\x07\xd0\xdb\x14\x94\x03\xec\x27\x18\x0c\x19\xec\xff\xb8\xc4\xbd\xfa\x20\xb2\xf7\xd4\x79\xbb\x13\x06\xfb\x92\xf8\xde\x65\x25\xc5\x77\xb2\xda\x4b\x4b\xea\x86\x0c\x67\xae\x26\xe5\xa6\x04\xd4\x2d\x86\x9b\x73\xf3\x03\x81\x36\x29\x83\xf4\x13\xfa\xed\xc0\xb3\x58\xc2\x99\x11\xb7\x33\x33\x5d\xa0\xcd\x9a\xc3\xb9\x0e\xce\xb0\x4f\xf6\x07\xe4\x32\x2e\xa3\x70\x41\xaa\x5e\x94\x3c\x58\xa4\x22\xfd\x05\xed\xc5\x44\xc9\xf7\x59\x63\x53\x10\x61\xbc\x8c\x48\x24\x4f\x7e\x76\x3b\x84\xed\x6a\x52\xda\x9e\x4a\x97\xe8\xde\x75\xe6\x4d\xaf\xb5\x5a\x4e\xa9\x1f\x40\xef\x79\x0b\xfb\xcf\xd8\xbf\xe6\xd3\x35\xf7\xa0\xb7\x5a\x7c\x65\x5f\xb1\xa8\x8f\x37\xbc\xd6\x48\xcb\x72\xbd\x04\xbb\x40\xa3\xa1\xce\xdb\x37\x33\x37\x31\xc9\x10\xc0\xfb\xfa\x80\x86\x1e\x0e\x51\xd6\x63\x4d\x78\x7b\x7c\xbf\xef\xa9\x4a\xe1\xf3\x04\xa3\x29\xab\x7e\x8a\xa5\xc4\x10\x0a\x97\x3d\x0c\xd3\xd8\x6d\xdc\xa5\x97\xb9\xed\x91\xd9\x2a\x8f\xd5\x24\x3f\x0c\xf9\x57\x58\xe2\xef\xc4\x0e\x10\xfd\xeb\x00\x08\xde\xfc\x10\x70\x87\xfa\x18\xe5\x21\x55\x67\x19\x7e\x08\x8e\x82\xbb\xf2\x07\xc4\xb1\xc5\x3e\xee\x70\xcb\x62\xdb\x4b\x32\x33\x85\x54\x38\xee\x4f\xfc\xf0\x42\x7e\xaf\x2e\x83\xf6\xb4\x99\x97\x32\x40\x68\xb2\x96\xd4\x5b\x71\xba\x6c\x23\x3a\xbc\x26\x7b\x73\x37\x24\x6a\x45\x38\xae\x93\x5e\xeb\x15\x2f\xbf\x8f\xd1\x31\x6d\xfa\x5b\xfe\xc7\xe3\x88\xfa\xac\x7e\xb4\x1a\x84\xbb\x9e\xe8\x64\x78\x9d\x61\x62\x81\x93\xec\x55\xd9\x66\xa9\x46\xad\x54\x31\xd8\x99\xa3\x15\x2b\x56\x5a\xa7\xd3\xbf\x65\xbd\x5e\xe7\x6d\x63\xab\xe7\x07\x1e\x54\x09\xed\xb1\x6c\xe6\x62\x96\x23\xb6\x1a\xd9\x86\x8b\xfd\x20\xc5\x23\x2c\x4e\x78\x51\xac\x8e\xdb\x3e\xfa\x31\x12\x8b\x9a\x18\x46\x6f\x97\x5c\x80\x53\x04\x43\xd2\x80\x5f\xc7\x2c\x1d\x82\x38\x0a\x99\x30\xe2\xbe\xd5\xf1\xc9\x3d\x68\x77\x95\x15\x20\xb1\x3f\xfa\xb3\xed\x1d\x6f\x17\x6f\x27\x0b\x3c\x3a\x61\x11\xd6\xde\xee\xea\x6a\x45\xd3\xdb\x9e\xa1\xb8\xbf\xa8\xf6\x7a\xf9\x54\xcc\x54\x2f\x6f\xe7\x70\x9b\x9c\xb6\x6c\x27\x1c\x50\xbb\x63\x0f\xa7\x68\x53\x6f\x63\xc9\xc4\xe6\x4d\x8f\xa3\x74\x9c\xea\x29\x79\x9f\x55\x8f\xa6\x8f\x83\x21\x80\x8f\x28\x0b\xea\x14\x62\x51\x3f\xb7\xbf\x2f\x66\xe4\x1a\xff\x00\x38\xc1\xe2\x0c\x60\x00\x41\xd3\x38\xb1\x0e\x01\xc7\x00\x48\xc6\x78\xc0\xbe\xee\xe7\x81\xbf\x8f\x31\x4c\x07\xfa\xbd\xbe\x5d\x17\x6f\x9f\x29\x38\xde\xc0\x38\xa1\x6e\xa2\x78\x84\x7a\x54\x65\x7a\x9c\x55\x84\x00\xd8\xf7\x86\xbd\xe4\xe3\x00\x0b\xac\x9a\xff\x38\x65\xd2\x6f\x71\xd3\x8d\x53\x6b\x5d\x19\x29\xec\x3c\xe5\x61\x8a\xaa\xc7\xb2\x2a\x34\x52\x5e\x63\x28\xe6\x24\x64\x42\x7b\xc5\xa6\x7d\x9c\x1e\x30\xf1\xf9\x51\xdf\x2e\x40\x1f\x4d\x9f\x62\x8f\xcf\xcf\x68\xbe\xb8\x90\xc4\x29\x40\x92\xc4\x9a\xc6\xe9\x20\x24\x28\x3a\xc6\x03\xfe\x75\xc1\x3c\x6d\x79\xda\x11\x80\x64\x27\x50\xaa\x13\xc7\x32\xe2\x7b\x60\x7b\xb8\xcd\xce\x56\x6f\x49\x39\x5f\x97\xdb\x06\x0c\x0b\x08\xa9\x5f\xa9\xf1\x38\x89\x73\x00\x10\x2c\xc1\xad\x23\xc0\x51\x24\xc4\x89\x98\x0f\x5e\x8b\x31\xbe\x99\x69\x24\xf7\x04\x26\xe2\xb4\x20\x16\x29\x91\xeb\x49\xbe\x73\x68\xb9\x65\x08\xdb\x29\xb6\x1e\xd7\xb5\x31\x42\x1a\xbe\x9a\xbe\xa8\xd5\x70\x78\x93\xa2\x71\x92\xe0\x01\x4f\x31\xeb\x84\x82\x2c\x1b\x93\x4c\xcc\x80\xe8\x75\x48\xf3\xea\x76\x48\x38\xf5\x60\x3e\x68\x78\x06\xfd\x50\xb3\x1d\x03\xcf\x9d\x26\xfa\x9d\xe3\xd6\x7b\x44\x0e\xd9\xae\x21\xed\xb6\x4c\xbf\x48\xa1\x19\x7d\xf1\x21\x8d\x73\x34\x45\x80\x75\x40\x47\x7c\x4c\x73\x71\x18\xf0\xaf\x57\xcb\xd3\xd9\xe2\xa4\xbb\x34\x47\x58\xac\xd1\x21\x77\xa6\x33\x94\x0d\xc5\xed\xb4\x92\x29\x70\xae\x67\x64\x8a\x8e\x15\xdf\xa2\x7c\x9b\xf9\xff\x56\x8a\xc7\x01\x41\x13\x14\xe0\x29\x7e\x1d\xe3\x21\x41\x84\x71\x10\x44\xdc\x7f\x49\x0a\x00\x9c\x05\x2c\xc1\xac\x03\x3e\x26\xc3\x38\x20\x03\x00\xc8\xff\x8a\x14\x05\x00\xc1\xd0\x04\x4d\xaf\x79\x9a\x8c\xe2\x20\x8e\x02\x8e\xff\xd6\xf6\xc4\x85\x8a\xa0\x64\x6f\x2f\xe3\xfe\x58\xbb\x1b\xe9\x7c\x02\xe4\xf6\x5c\x63\xad\x43\x1f\x64\x20\xe2\x5e\x6f\x9e\x0f\xfe\x9e\x70\xc6\xe8\xff\xa5\xf1\xf2\x39\x19\x61\xde\xbc\x08\xf2\x97\xa3\xbe\xb5\x65\xe4\xb1\x53\xbb\x37\xc5\xdb\x96\x97\x06\xb3\x14\x4b\x77\x54\x74\xf9\x1a\x4b\x66\x28\xa3\x2f\x52\xff\x3a\x7c\xbc\x77\x7f\xb3\x33\x38\xd9\x39\x38\x04\x55\xdf\x8a\x1d\x99\x74\x86\xb7\x6a\x23\x46\x8f\xeb\x29\xcb\x31\xed\xd6\x4e\xea\xc0\xce\xf3\x38\x1d\x9e\xe5\xdf\xb4\x45\xfa\x91\xd7\x58\x94\xc1\xa8\xf8\xb8\x13\x2f\xb6\x33\x04\xc0\x39\x82\x23\x48\x40\xaf\x01\x1e\x03\x1a\x02\x0e\xa7\x70\xfa\x45\x4b\x6c\x98\x3c\x74\x77\xc2\x52\x0b\x81\x56\x74\x2d\x97\x8d\xe7\xa9\xdc\xd9\xe2\x15\x27\x98\x5b\x93\x60\x51\x68\x52\xae\x47\xfb\x0b\xfe\x43\x2d\xe2\xff\xf6\x70\x06\x70\x04\x4b\x12\x38\xb7\x66\x39\x2e\x89\x59\x8e\xc2\x09\xc0\xfe\x65\xad\xb4\x59\xb7\x65\x30\xa7\x7d\x33\xd6\x31\x16\x20\x04\xfb\xe1\x77\x69\xf0\x36\xe8\xf9\xe3\x45\xc7\xc3\x14\x5b\xf2\xf0\x28\xa4\x57\xc7\x47\xcb\xf5\x34\x1d\xb0\x85\xf3\xb1\x80\x0b\xa5\x31\xcb\x03\xba\x2a\x5a\xa3\x96\x7f\x8a\xbf\x07\x65\x1e\x3f\x9f\x31\x1f\x77\xee\xb7\x3b\xf7\x41\x70\x9f\x0b\x7f\xa9\x6c\x28\xa9\x31\x1c\x66\xc3\x00\x66\xe2\xea\x99\x65\x0c\x97\x75\x2f\x8c\x07\x5c\x35\x1a\xc0\xd6\x3d\x68\xe4\x23\xcd\x8d\xde\xfe\x8f\xd8\x2f\xe6\x1f\x2f\x20\xc0\x58\x35\xe0\x36\xe9\x21\x4b\x0a\xf6\xc6\x72\x78\x46\x61\x23\x76\x3c\xde\x8e\x38\x6c\x46\x71\x77\x52\x39\x1c\x33\x80\xff\x22\xf1\x75\x97\xf8\xc3\x33\xaf\x68\x5b\xa3\x5d\xac\x63\x9c\xd0\xaa\xc6\x6c\xa8\x08\x5c\x0c\x94\xeb\x43\x96\x78\xb3\x87\x1b\xce\xaa\x15\xdf\xe4\x77\xd1\x91\x39\x3f\x9c\x17\xf4\x1c\x54\xe5\xc7\x1d\xfc\x76\x07\x4f\xdc\xb7\xc5\x4f\xdc\xb5\x2b\x39\xcd\x0f\x67\xb6\x54\x3b\xc7\x05\x3b\x8e\x01\x45\xcb\xd9\x37\x86\xda\x35\x4c\xb0\x70\x60\x45\x9e\x63\x3e\xbe\x4e\x3f\xe5\xbc\xd6\x8d\xc6\x93\x97\x4d\xd5\x9d\x73\xb4\x51\x0c\xe7\x5c\xe1\x21\xa7\x54\xab\x5b\x4f\x4a\x29\x61\x9a\x8f\x6e\x6a\x57\xb4\x40\xb8\xdb\x51\xfb\xe7\x3f\xfe\x37\x00\x00\xff\xff\x82\xbf\x98\xbb\x70\x21\x00\x00")

func apptplGoSumBytes() ([]byte, error) {
	return bindataRead(
		_apptplGoSum,
		"apptpl/go.sum",
	)
}

func apptplGoSum() (*asset, error) {
	bytes, err := apptplGoSumBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apptpl/go.sum", size: 8560, mode: os.FileMode(384), modTime: time.Unix(1559034139, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _apptplModelMockMockGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\xcd\x4f\xce\xe6\xd2\xd7\x57\x70\xf1\x57\xf0\xf3\x0f\x51\x70\x75\xf1\x0c\xe1\xe2\x2a\xa9\x2c\x48\x55\xf0\xcd\x4f\xce\x0e\x2e\xc9\x2f\x02\xa9\x2a\x2e\x29\x2a\x4d\x2e\x51\xa8\xae\xe5\xe2\x4a\x2b\xcd\x4b\x56\xf0\x4b\x2d\x47\x92\xd6\xd0\x54\xd0\x42\x56\x5d\xcd\xc5\x59\x94\x5a\x52\x5a\x94\xa7\xa0\x86\x24\x5c\x5d\xcb\x55\xcb\x05\x08\x00\x00\xff\xff\x55\xe7\xd8\x7b\x77\x00\x00\x00")

func apptplModelMockMockGoBytes() ([]byte, error) {
	return bindataRead(
		_apptplModelMockMockGo,
		"apptpl/model/mock/mock.go",
	)
}

func apptplModelMockMockGo() (*asset, error) {
	bytes, err := apptplModelMockMockGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apptpl/model/mock/mock.go", size: 119, mode: os.FileMode(420), modTime: time.Unix(1559033618, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _apptplModelMysqlMysqlGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8d\xc1\xaa\xc2\x30\x10\x45\xd7\x9d\xaf\x18\xba\x78\x24\x85\x97\x7e\xc5\x5b\x3e\x37\xfd\x82\x1a\xc6\x18\x34\x49\x4d\x26\x68\x29\xfd\x77\x89\x16\x49\xc1\xcd\xc0\x1d\xee\x39\x77\x1a\xf5\x65\x34\x84\x6e\x4e\xb7\x2b\x80\x75\x53\x88\x8c\x02\x9a\xd6\x58\x3e\xe7\xa3\xd2\xc1\xf5\x26\xfc\x3e\x42\x74\x7d\x39\x2d\x48\x00\x9e\x27\xc2\xff\x82\x0c\x1c\x62\xe1\x13\xc7\xac\x19\x17\x68\xc8\x1b\xeb\x09\xbb\x52\x56\x7f\xaf\x00\x2b\xc0\x29\x7b\x8d\x07\xba\xd7\x94\xf8\xd2\x95\xd8\xed\xc4\x0b\x34\x91\x38\x47\x8f\x3f\xf5\x7f\x59\x3f\x52\xe1\xd2\x9e\x91\x65\x67\xa0\x94\x6c\xf0\x42\x6e\xf6\x2d\x57\x3e\x97\xd4\x7b\x5f\xd5\x75\x58\xe1\x19\x00\x00\xff\xff\x97\xdf\x53\xcd\x14\x01\x00\x00")

func apptplModelMysqlMysqlGoBytes() ([]byte, error) {
	return bindataRead(
		_apptplModelMysqlMysqlGo,
		"apptpl/model/mysql/mysql.go",
	)
}

func apptplModelMysqlMysqlGo() (*asset, error) {
	bytes, err := apptplModelMysqlMysqlGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apptpl/model/mysql/mysql.go", size: 276, mode: os.FileMode(420), modTime: time.Unix(1559033477, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _apptplModelStorageGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xce\x41\x6a\xc3\x30\x10\x05\xd0\xb5\xfe\x29\xfe\xd2\xa6\x39\x41\xc0\x97\x68\x97\x21\x34\x83\x32\x16\x22\xb1\x2c\x34\x6a\x69\x10\xba\x7b\x71\xdd\x96\x6c\x67\xde\xfc\xf9\x59\xfc\x4d\x82\x72\x59\xaf\x7a\x07\x3e\xa5\x70\x80\xb3\xba\x16\x09\x51\x8d\x13\x17\xc9\x27\xab\x25\xa6\x70\x7e\xfb\x19\x6b\xeb\x18\x81\xf9\x23\x79\xbe\x6a\x88\x56\xb5\x0c\x49\x16\xe5\xce\x0e\x34\xfe\xca\x91\x0d\x70\xef\x07\xae\x37\x1e\x27\xfe\xc7\x9e\x36\x7e\x06\x5c\x9c\xb7\x55\x83\x73\x59\x52\xf4\xc3\x65\x27\x4a\xb9\x17\x95\xeb\x83\xfa\x15\xad\xda\x91\x17\xbe\x70\x3b\x1a\xe1\x3a\x9e\x0a\xee\x49\x9c\x68\xe8\x40\x7d\x64\xfd\xfb\xcd\x98\xaa\x96\x59\xbc\xb2\xa1\xe3\x3b\x00\x00\xff\xff\xe5\xf7\x01\xd7\xe9\x00\x00\x00")

func apptplModelStorageGoBytes() ([]byte, error) {
	return bindataRead(
		_apptplModelStorageGo,
		"apptpl/model/storage.go",
	)
}

func apptplModelStorageGo() (*asset, error) {
	bytes, err := apptplModelStorageGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apptpl/model/storage.go", size: 233, mode: os.FileMode(420), modTime: time.Unix(1559032152, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _apptplServerOptsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xcf\x6a\xc3\x30\x0c\x87\xcf\xf6\x53\xe8\x98\xec\xd0\x14\x0a\x63\x14\xc2\x36\xb6\x1d\xbb\x1d\x7a\xd8\xd9\x55\x94\x3f\xd4\x58\x99\xac\x0c\x4a\xe9\xbb\x0f\xa7\x4d\xb6\x51\x06\xcb\x21\xb6\xb1\xf8\xf4\xfd\xe4\xde\xe1\xde\x35\x04\x91\xe4\x93\xc4\x5a\x3d\xf4\x04\x6f\xbd\x76\x1c\xa0\x1e\x02\x66\xc8\xa1\xee\x1a\xb8\x79\x1a\xd7\xfc\x52\x71\x3e\x41\x54\x19\x50\xe1\x68\xcd\xe6\x10\x3f\xfc\xf3\xf6\x15\xe6\x2f\xaa\x74\xa1\xb1\xe6\x25\xb8\x9d\xa7\x0d\xe3\x7e\xab\x2c\xa9\xd7\x8e\xd9\x5b\xf3\x58\x55\x32\x15\x9d\xac\x2d\x0a\x10\x66\x5d\xa7\xdf\x83\x62\x9f\x79\x46\xe7\x5b\x8e\xba\x5e\xad\x96\xb7\xcb\xbc\x40\x4f\x4e\x90\x2b\xba\xc7\xd6\x49\x24\x2d\x07\xad\xef\x6c\xb2\x84\xf7\x4e\xdb\x49\x21\xab\x62\xb8\x80\xf3\x29\xca\xd1\x1a\x21\x1d\x64\x0a\x35\xe7\x49\x37\x06\x17\xb3\x7e\x09\x55\x0c\xd6\x9c\x92\xd2\x48\xbe\xd2\xcf\xfe\x0d\xbd\x4e\x5e\x82\xca\x40\x3f\xf1\x49\x3c\x4d\x22\x73\xdf\xe3\xf8\xb3\xc1\xef\xa7\x38\x77\x19\xf7\x8b\x71\x98\x25\x24\xc8\x48\xff\x0a\x00\x00\xff\xff\xd9\x50\xc2\x2e\xd7\x01\x00\x00")

func apptplServerOptsGoBytes() ([]byte, error) {
	return bindataRead(
		_apptplServerOptsGo,
		"apptpl/server/opts.go",
	)
}

func apptplServerOptsGo() (*asset, error) {
	bytes, err := apptplServerOptsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apptpl/server/opts.go", size: 471, mode: os.FileMode(420), modTime: time.Unix(1559035862, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _apptplServerServerGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xc1\x4e\xe3\x30\x10\x3d\x7b\xbe\x62\x88\xb4\xc8\x41\xc5\x41\x7b\x44\xea\x61\x05\x5d\x2e\x4b\x91\x28\xbb\xd7\x25\xb8\x13\x63\xb5\xb5\xb3\x76\x42\x8b\xa2\xfc\xfb\x6a\x9c\xb4\x50\xc4\xee\xa5\x75\xde\xf8\xbd\x37\x7e\x33\x75\xa9\x57\xa5\x21\x8c\x14\x5e\x28\x00\xd8\x4d\xed\x43\x83\x12\x44\xd6\x75\xa8\xea\x95\x99\x97\x1b\xea\xfb\x62\xe3\x97\xb4\xce\x3e\x87\x8b\x8d\xd7\xab\x7f\xd6\x5e\xe3\x9f\x4f\x88\x2f\x14\xa2\xf5\x8e\x0b\xc6\x36\xcf\xed\x93\xd2\x7e\x53\x18\xeb\xce\x8d\x77\x56\xf3\xe9\x63\xcd\x9f\xef\x7c\xd8\x14\xfc\xf3\xa1\x14\x6d\x68\xeb\x48\xae\x58\x7b\x13\xda\x98\x41\x0e\xd0\xbc\xd6\x84\x8b\xf4\x2c\x8c\x4d\x68\x75\x83\x1d\x88\x45\xe3\x03\xbf\x37\xf5\xa6\xc6\x2f\x10\x3f\xbc\x31\x14\x10\x07\xbe\xfa\x6e\x69\xbd\x1c\x30\x10\x57\xde\x55\xd6\x20\x0e\xff\x00\x62\x4b\x4f\xa3\xee\x99\xb1\x4e\xcd\x9c\xb1\x8e\xa0\x07\xa8\x5a\xa7\x71\x4e\xdb\xa1\x2a\x7d\xdd\x58\xef\x22\x2a\xa5\xee\xd2\x31\xc7\xb3\x91\xd8\x01\x88\x88\x97\xd3\xb1\xc1\xae\x07\x10\xba\x32\x8c\x0c\x36\x5d\x0f\xa2\xf2\x01\x7f\x4f\xd0\x33\x1a\x4a\x67\x08\xf7\x8a\x1d\x08\xe1\xe5\xa9\xae\x4c\x0e\x82\xb9\xb6\x42\x5d\x19\x75\xcb\x59\x5f\x2f\xe6\x78\x32\xc5\x2c\x4b\xd7\x68\x82\x14\x02\x4b\x70\x6e\x6a\x4e\xdb\xa1\x5f\xf9\x98\x06\xf3\x38\x39\x22\xe6\x20\x84\x7e\x26\xbd\x9a\x85\x20\x29\x04\xfe\x8e\xfb\x98\x70\x8a\x89\xc3\x22\x89\x30\xe2\x92\x8e\xbb\x98\xb9\xf2\x69\x4d\xb7\x5e\xaf\xf6\xc4\xee\xa3\x8c\xd7\xab\xa4\xf2\x76\x47\x8e\x1a\x51\xbd\xc5\x3b\x45\x47\xdb\x1b\xeb\xc6\x3c\x73\x00\x11\xa8\x69\x83\xc3\xd3\x78\xc8\xfb\xf8\xca\xfb\x91\xb0\x6d\x8a\x94\xa1\x6b\xaa\xca\x76\xdd\xb0\x8d\x51\x3f\x23\x49\x06\xef\x49\xfb\x17\x0a\xaf\x32\x3f\x82\x87\xc9\x33\xc8\xe8\xcd\xec\x41\x66\x87\x7d\x9d\x20\xbb\x4a\xdd\xec\x06\xab\x2b\xef\x1a\xda\x35\x79\x7a\xa3\x6e\x76\x6a\xd1\x04\xeb\x8c\xfc\x7a\x71\x31\xc1\xec\xcb\x32\x9b\xe0\x48\x55\xbf\x86\x7f\x7e\x68\x52\x0e\xbe\xad\x53\x7b\xea\x86\x8f\x32\x2b\xca\xda\x66\x5c\x62\xad\x54\x1e\xcd\xff\xef\x2a\x8a\x02\x1f\xee\xae\xef\x2e\x2f\xb1\xb2\x3b\xdc\x10\x08\x76\x48\x71\x8e\x79\x99\x43\x5c\xef\xa7\xcb\x9b\xe1\x43\x12\xb1\x55\x5a\x93\x93\x29\x3a\xbb\x4e\xaa\x75\xe9\xac\x1e\x77\xa0\x3f\xd0\x65\xdc\xef\x70\x8e\xf7\xad\x93\xf9\xa0\xc1\x8c\xd1\xea\xdd\x00\x15\xdf\x88\x6a\xd8\x68\xf5\x6d\xb9\x0c\x39\xf4\xf0\x37\x00\x00\xff\xff\x5c\xdd\x0b\xbe\x73\x04\x00\x00")

func apptplServerServerGoBytes() ([]byte, error) {
	return bindataRead(
		_apptplServerServerGo,
		"apptpl/server/server.go",
	)
}

func apptplServerServerGo() (*asset, error) {
	bytes, err := apptplServerServerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apptpl/server/server.go", size: 1139, mode: os.FileMode(420), modTime: time.Unix(1559036521, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _apptplVersionVersionGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x4b\x2d\x2a\xce\xcc\xcf\xe3\xe2\x4a\xce\xcf\x2b\x2e\x51\xd0\xe0\xe2\x0c\x83\x88\x28\xd8\x2a\x24\x18\xe8\x19\xe8\x19\xea\x26\xa5\x96\x24\x26\x70\x69\x72\x01\x02\x00\x00\xff\xff\x9f\x2a\x6b\xd1\x33\x00\x00\x00")

func apptplVersionVersionGoBytes() ([]byte, error) {
	return bindataRead(
		_apptplVersionVersionGo,
		"apptpl/version/version.go",
	)
}

func apptplVersionVersionGo() (*asset, error) {
	bytes, err := apptplVersionVersionGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apptpl/version/version.go", size: 51, mode: os.FileMode(420), modTime: time.Unix(1559032586, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"apptpl/Makefile": apptplMakefile,
	"apptpl/cmd/main.go": apptplCmdMainGo,
	"apptpl/cmd/server/server.go": apptplCmdServerServerGo,
	"apptpl/docker-compose.yaml": apptplDockerComposeYaml,
	"apptpl/go.mod": apptplGoMod,
	"apptpl/go.sum": apptplGoSum,
	"apptpl/model/mock/mock.go": apptplModelMockMockGo,
	"apptpl/model/mysql/mysql.go": apptplModelMysqlMysqlGo,
	"apptpl/model/storage.go": apptplModelStorageGo,
	"apptpl/server/opts.go": apptplServerOptsGo,
	"apptpl/server/server.go": apptplServerServerGo,
	"apptpl/version/version.go": apptplVersionVersionGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"apptpl": &bintree{nil, map[string]*bintree{
		"Makefile": &bintree{apptplMakefile, map[string]*bintree{}},
		"cmd": &bintree{nil, map[string]*bintree{
			"main.go": &bintree{apptplCmdMainGo, map[string]*bintree{}},
			"server": &bintree{nil, map[string]*bintree{
				"server.go": &bintree{apptplCmdServerServerGo, map[string]*bintree{}},
			}},
		}},
		"docker-compose.yaml": &bintree{apptplDockerComposeYaml, map[string]*bintree{}},
		"go.mod": &bintree{apptplGoMod, map[string]*bintree{}},
		"go.sum": &bintree{apptplGoSum, map[string]*bintree{}},
		"model": &bintree{nil, map[string]*bintree{
			"mock": &bintree{nil, map[string]*bintree{
				"mock.go": &bintree{apptplModelMockMockGo, map[string]*bintree{}},
			}},
			"mysql": &bintree{nil, map[string]*bintree{
				"mysql.go": &bintree{apptplModelMysqlMysqlGo, map[string]*bintree{}},
			}},
			"storage.go": &bintree{apptplModelStorageGo, map[string]*bintree{}},
		}},
		"server": &bintree{nil, map[string]*bintree{
			"opts.go": &bintree{apptplServerOptsGo, map[string]*bintree{}},
			"server.go": &bintree{apptplServerServerGo, map[string]*bintree{}},
		}},
		"version": &bintree{nil, map[string]*bintree{
			"version.go": &bintree{apptplVersionVersionGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

